@page "/dashboard"
@rendermode InteractiveServer
@using Frontend.Pages
@using Syncfusion.Blazor.Layouts
@using DataAccess.Models
@using DataAccess.Services
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject CollaboratorService OrderService

<PageTitle>Api Dashboard</PageTitle>
<h2>Api Dashboard</h2>
<div id="control-region">
    <div class="control-section" id="target">
        <div style="padding:5px;text-align:right;">
            <Syncfusion.Blazor.Buttons.SfButton CssClass="e-btn e-info" Content="Add Panel" @onclick="AddClick"></Syncfusion.Blazor.Buttons.SfButton>
        </div>
        <SfDashboardLayout @ref="dashboardObject" AllowFloating="true" AllowResizing="true" Columns="5">
            <DashboardLayoutPanels>
                <DashboardLayoutPanel Id="one" Column="0" Row="0">
                    <HeaderTemplate>Panel 1</HeaderTemplate>
                    <ContentTemplate>
                        <SfChart Title="User Analysis">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Last Name"></ChartPrimaryXAxis>
                            <ChartPrimaryYAxis Title="Count"></ChartPrimaryYAxis>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@Users" XName="LastName" YName="Id" Type="ChartSeriesType.Bar">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true"></ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="two" Row="0" Column="1" SizeX=2 SizeY=2>
                    <HeaderTemplate>Panel 2</HeaderTemplate>
                    <ContentTemplate>

                        <div class="col-lg-12 control-section">
                            <div class="content-wrapper">
                                <div class="row">
                                    <SfGrid DataSource="@GridData" AllowFiltering="true" AllowPaging="true">
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageCount="3" PageSize="18"></GridPageSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(Collaborator.Id) HeaderText="ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(Collaborator.FirstName) HeaderText="First Name" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Collaborator.LastName) HeaderText="Last Name" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Collaborator.TeamRole) HeaderText="Team Role" Width="150"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                @code {
                    public List<Collaborator> GridData { get; set; }

                    protected override async Task OnInitializedAsync()
                    {
                        GridData = (await OrderService.GetCollaboratorsAsync()).ToList();
                    }
                            }
                <DashboardLayoutPanel Id="three" Row="1" Column="0" SizeX=1 SizeY=1>
                    <HeaderTemplate>Panel 3</HeaderTemplate>
                    <ContentTemplate>
                        <SfChart Title="Sales Analysis">
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Month"></ChartPrimaryXAxis>
                            <ChartPrimaryYAxis Title="Sales in Dollar"></ChartPrimaryYAxis>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@Sales" XName="Month" YName="SalesValue" Type="ChartSeriesType.Column">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true"></ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                            <ChartEvents OnPointRender="PointRenderEvent"></ChartEvents>
                        </SfChart>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="four" Row="0" Column="3" SizeX=2 SizeY=2>
                    <HeaderTemplate>Panel 4</HeaderTemplate>
                    <ContentTemplate>
                        <h2>Panel 4</h2>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="five" Row="1" Column="1" SizeX=1 SizeY=1>
                    <HeaderTemplate>Panel 5</HeaderTemplate>
                    <ContentTemplate>
                    
                        <SfAccumulationChart Title="Mobile Browser Statistics">
                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries DataSource="@StatisticsDetails" XName="Browser" YName="Users"
                                                         Name="Browser">
                                </AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>

                            <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                        </SfAccumulationChart>

                        @code {
                            public class Statistics
                            {
                                public string Browser { get; set; }
                                public double Users { get; set; }
                            }

                            public List<Statistics> StatisticsDetails = new List<Statistics>
                                {
                                new Statistics { Browser = "Chrome", Users = 37 },
                                new Statistics { Browser = "UC Browser", Users = 17 },
                                new Statistics { Browser = "iPhone", Users = 19 },
                                new Statistics { Browser = "Others", Users = 4  },
                                new Statistics { Browser = "Opera", Users = 11 },
                                new Statistics { Browser = "Android", Users = 12 },
                                };
                         }
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="six" Row="1" Column="2" SizeX="2" SizeY="2">
                    <HeaderTemplate>Panel 6</HeaderTemplate>
                    <ContentTemplate>
                        <div class="control-section" align='center'>
                            <SfChart Title="Stock Price Analysis" Width="@Width">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="Price" LabelFormat="${value}" RangePadding="ChartRangePadding.None">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries Type="ChartSeriesType.Line" DataSource="@ChartPointsX" XName="Period" YName="StockPrice" Width="2" Name="Product X">
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" DataSource="@ChartPointsY" XName="Period" YName="StockPrice" Width="2" Name="Product Y">
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
                                    <ChartCrosshairLine Color="rgba(204,214,235,0.25)" Width="20"></ChartCrosshairLine>
                                </ChartCrosshairSettings>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>
                        </div>
                        @code {
                            private Random randomNum = new Random();
                            public string Width
                            {
                                get;
                                set;
                            } = "90%";
                            private double stockPriceX = 80,
                            stockPriceY = 90;
                            public List<LineChartData> ChartPointsX
                            {
                                get;
                                set;
                            } = new List<LineChartData>();
                            public List<LineChartData> ChartPointsY
                            {
                                get;
                                set;
                            } = new List<LineChartData>();
                            protected override void OnInitialized()
                            {
                                GetChartPoints();
                            }
                            private void GetChartPoints()
                            {
                                for (int i = 1; i < 500; i++)
                                {
                                    if (randomNum.NextDouble() > 0.5)
                                    {
                                                stockPriceX += randomNum.NextDouble();
                                                stockPriceY += randomNum.NextDouble();
                                    }
                                    else
                                    {
                                                stockPriceX -= randomNum.NextDouble();
                                                stockPriceY -= randomNum.NextDouble();
                                    }
                                    ChartPointsX.Add(new LineChartData
                                    {
                                        Period = new DateTime(1960, 1, 1).AddMonths(i + 1).AddDays(i),
                                        StockPrice = Math.Round(stockPriceX)
                                    });
                                    ChartPointsY.Add(new LineChartData
                                    {
                                        Period = new DateTime(1960, 1, 1).AddMonths(i + 1).AddDays(i),
                                        StockPrice = Math.Round(stockPriceY)
                                    });
                                }
                            }
                            public class LineChartData
                            {
                                public DateTime Period
                                {
                                    get;
                                    set;
                                }
                                public double StockPrice
                                {
                                    get;
                                    set;
                                }
                            }
                        }
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="seven" Row="1" Column="4" SizeX=1 SizeY=1>
                    <HeaderTemplate>Panel 7</HeaderTemplate>
                    <ContentTemplate>
                        <h2>Panel 7</h2>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Id="eight" Row="0" Column="3" SizeX=1 SizeY=1>
                    <HeaderTemplate>Panel 8</HeaderTemplate>
                    <ContentTemplate>
                        <h2>Panel 8</h2>
                    </ContentTemplate>
                </DashboardLayoutPanel>
            </DashboardLayoutPanels>
        </SfDashboardLayout>

            @code {
                private IEnumerable<UserModel> Users;

             
                public class SalesInfo
                {
                    public string Month { get; set; }
                    public double SalesValue { get; set; }
                }

                public List<SalesInfo> Sales = new List<SalesInfo>
                    {
                    new SalesInfo { Month = "Jan", SalesValue = 40 },
                    new SalesInfo { Month = "Feb", SalesValue = 20 },
                    new SalesInfo { Month = "Mar", SalesValue = 26 },
                    new SalesInfo { Month = "Apr", SalesValue = 20 },
                    new SalesInfo { Month = "May", SalesValue = 40 },
                    new SalesInfo { Month = "Jun", SalesValue = 32 },
                    new SalesInfo { Month = "Jul", SalesValue = 35 }
                    };

                private string[] colors = new string[] { "#7dba53", "#83a0cf", "#6FAAB0", "#7dba53", "#83a0cf", "#6FAAB0", "#7dba53" };
                private int colorIndex = 0;

                public void PointRenderEvent(PointRenderEventArgs args)
                {
                    args.Fill = colors[colorIndex % colors.Length];
                    colorIndex++;
                }
            }

    </div>
</div>
<br />
<style>
    .e-dashboardlayout {
        padding: 10px;
    }

        .e-dashboardlayout.e-control .e-panel:hover span {
            display: block;
        }

        .e-dashboardlayout .e-panel .e-panel-container .text-align {
            vertical-align: middle;
            font-weight: 600;
            font-size: 20px;
            text-align: center;
        }

    .e-template-icon {
        padding: 10px;
        float: right;
        display: none;
    }

    .text-align {
        line-height: 160px;
    }

    .sb-demo-section .container-fluid {
        background: #E5E5E5;
    }

    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 350px;
    }
</style>
@code {
    SfDashboardLayout? dashboardObject;
    public int Count = 9;
    public async Task AddClick(System.EventArgs args)
    {
        string ContentValue = this.Count.ToString();
        PanelModel panel = new PanelModel
        {
            Id = this.Count.ToString() + "_layout",
            SizeX = 1,
            SizeY = 1,
            Column = 0,
            Row = 0,
            Header = @<div class='text-align'> Panel @ContentValue </div>
        };
        await dashboardObject!.AddPanelAsync(panel);
        this.Count = this.Count + 1;
    }
}